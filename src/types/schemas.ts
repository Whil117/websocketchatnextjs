/* tslint:disable */
/* eslint-disable */
import { GraphQLResolveInfo } from 'graphql';
/**
 * This file is auto-generated by graphql-schema-typescript
 * Please note that any changes in this file may be overwritten
 */
 

/*******************************
 *                             *
 *          TYPE DEFS          *
 *                             *
 *******************************/
export interface IQuery {
  listChatByUser?: IListChatsByUser;
  listMessagesByChatUser?: IListMessagesChatUser;
  listUsers?: Array<IUserItem | null>;
}

export interface IInputFilterListChatUsers {
  userId?: string;
  page?: number;
  take?: number;
}

export interface IListChatsByUser {
  items?: Array<IChatByUserItem | null>;
  totalCount?: number;
  pageInfo?: IPaginationQuery;
}

export interface IChatByUserItem {
  id?: string;
  usersId?: Array<string | null>;
  users?: Array<IUserItem | null>;
}

export interface IUserItem {
  id?: string;
  name?: string;
  lastName?: string;
  age?: number;
  email?: string;
}

export interface IPaginationQuery {
  hasNextPage?: boolean;
  hasPreviousPage?: boolean;
}

export interface IInputFilterListMessagesByChat {
  conversationId: string;
  page?: number;
  take?: number;
}

export interface IListMessagesChatUser {
  items?: Array<IMessageChatConversation | null>;
  totalCount?: number;
  pageInfo?: IPaginationQuery;
}

export interface IMessageChatConversation {
  id?: string;
  conversationId?: string;
  message?: string;
  userId?: string;
  user?: IUserItem;
  createdAt?: string;
}

export interface IMutation {
  createMessage?: IMessageChatConversation;
  createChatByUser?: IChatByUserItem;
  createUser?: ILoginUserItem;
  loginUser?: ILoginUserItem;
  me?: IUserItem;
}

export interface IInputCreateMessage {
  userId: string;
  conversationId: string;
  message: string;
}

export interface IInputCreateChatByUser {
  userId?: string;
  toUserId?: string;
}

export interface IInputCreateUser {
  name?: string;
  lastName?: string;
  age?: number;
  password: string;
  email: string;
}

export interface ILoginUserItem {
  token?: string;
  user?: IUserItem;
}

export interface IInputLoginUser {
  email: string;
  password: string;
}

export interface ISubscription {
  postCreated?: IMessageChatConversation;
}

export interface IInputSubscript {
  id?: string;
}

export interface IMessageItem {
  id?: string;
  title?: string;
  message?: string;
}

/*********************************
 *                               *
 *         TYPE RESOLVERS        *
 *                               *
 *********************************/
/**
 * This interface define the shape of your resolver
 * Note that this type is designed to be compatible with graphql-tools resolvers
 * However, you can still use other generated interfaces to make your resolver type-safed
 */
export interface IResolver {
  Query?: IQueryTypeResolver;
  ListChatsByUser?: IListChatsByUserTypeResolver;
  ChatByUserItem?: IChatByUserItemTypeResolver;
  UserItem?: IUserItemTypeResolver;
  PaginationQuery?: IPaginationQueryTypeResolver;
  ListMessagesChatUser?: IListMessagesChatUserTypeResolver;
  MessageChatConversation?: IMessageChatConversationTypeResolver;
  Mutation?: IMutationTypeResolver;
  LoginUserItem?: ILoginUserItemTypeResolver;
  Subscription?: ISubscriptionTypeResolver;
  MessageItem?: IMessageItemTypeResolver;
}
export interface IQueryTypeResolver<TParent = any> {
  listChatByUser?: QueryToListChatByUserResolver<TParent>;
  listMessagesByChatUser?: QueryToListMessagesByChatUserResolver<TParent>;
  listUsers?: QueryToListUsersResolver<TParent>;
}

export interface QueryToListChatByUserArgs {
  filter?: IInputFilterListChatUsers;
}
export interface QueryToListChatByUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToListChatByUserArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToListMessagesByChatUserArgs {
  filter?: IInputFilterListMessagesByChat;
}
export interface QueryToListMessagesByChatUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToListMessagesByChatUserArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToListUsersResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IListChatsByUserTypeResolver<TParent = any> {
  items?: ListChatsByUserToItemsResolver<TParent>;
  totalCount?: ListChatsByUserToTotalCountResolver<TParent>;
  pageInfo?: ListChatsByUserToPageInfoResolver<TParent>;
}

export interface ListChatsByUserToItemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ListChatsByUserToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ListChatsByUserToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IChatByUserItemTypeResolver<TParent = any> {
  id?: ChatByUserItemToIdResolver<TParent>;
  usersId?: ChatByUserItemToUsersIdResolver<TParent>;
  users?: ChatByUserItemToUsersResolver<TParent>;
}

export interface ChatByUserItemToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ChatByUserItemToUsersIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ChatByUserItemToUsersResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IUserItemTypeResolver<TParent = any> {
  id?: UserItemToIdResolver<TParent>;
  name?: UserItemToNameResolver<TParent>;
  lastName?: UserItemToLastNameResolver<TParent>;
  age?: UserItemToAgeResolver<TParent>;
  email?: UserItemToEmailResolver<TParent>;
}

export interface UserItemToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserItemToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserItemToLastNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserItemToAgeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserItemToEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IPaginationQueryTypeResolver<TParent = any> {
  hasNextPage?: PaginationQueryToHasNextPageResolver<TParent>;
  hasPreviousPage?: PaginationQueryToHasPreviousPageResolver<TParent>;
}

export interface PaginationQueryToHasNextPageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PaginationQueryToHasPreviousPageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IListMessagesChatUserTypeResolver<TParent = any> {
  items?: ListMessagesChatUserToItemsResolver<TParent>;
  totalCount?: ListMessagesChatUserToTotalCountResolver<TParent>;
  pageInfo?: ListMessagesChatUserToPageInfoResolver<TParent>;
}

export interface ListMessagesChatUserToItemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ListMessagesChatUserToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ListMessagesChatUserToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IMessageChatConversationTypeResolver<TParent = any> {
  id?: MessageChatConversationToIdResolver<TParent>;
  conversationId?: MessageChatConversationToConversationIdResolver<TParent>;
  message?: MessageChatConversationToMessageResolver<TParent>;
  userId?: MessageChatConversationToUserIdResolver<TParent>;
  user?: MessageChatConversationToUserResolver<TParent>;
  createdAt?: MessageChatConversationToCreatedAtResolver<TParent>;
}

export interface MessageChatConversationToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MessageChatConversationToConversationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MessageChatConversationToMessageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MessageChatConversationToUserIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MessageChatConversationToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MessageChatConversationToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IMutationTypeResolver<TParent = any> {
  createMessage?: MutationToCreateMessageResolver<TParent>;
  createChatByUser?: MutationToCreateChatByUserResolver<TParent>;
  createUser?: MutationToCreateUserResolver<TParent>;
  loginUser?: MutationToLoginUserResolver<TParent>;
  me?: MutationToMeResolver<TParent>;
}

export interface MutationToCreateMessageArgs {
  input?: IInputCreateMessage;
}
export interface MutationToCreateMessageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToCreateMessageArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToCreateChatByUserArgs {
  input?: IInputCreateChatByUser;
}
export interface MutationToCreateChatByUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToCreateChatByUserArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToCreateUserArgs {
  input?: IInputCreateUser;
}
export interface MutationToCreateUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToCreateUserArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToLoginUserArgs {
  input?: IInputLoginUser;
}
export interface MutationToLoginUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToLoginUserArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToMeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ILoginUserItemTypeResolver<TParent = any> {
  token?: LoginUserItemToTokenResolver<TParent>;
  user?: LoginUserItemToUserResolver<TParent>;
}

export interface LoginUserItemToTokenResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LoginUserItemToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ISubscriptionTypeResolver<TParent = any> {
  postCreated?: SubscriptionToPostCreatedResolver<TParent>;
}

export interface SubscriptionToPostCreatedArgs {
  input?: IInputSubscript;
}
export interface SubscriptionToPostCreatedResolver<TParent = any, TResult = any> {
  resolve?: (parent: TParent, args: SubscriptionToPostCreatedArgs, context: any, info: GraphQLResolveInfo) => TResult;
  subscribe: (parent: TParent, args: SubscriptionToPostCreatedArgs, context: any, info: GraphQLResolveInfo) => AsyncIterator<TResult>;
}

export interface IMessageItemTypeResolver<TParent = any> {
  id?: MessageItemToIdResolver<TParent>;
  title?: MessageItemToTitleResolver<TParent>;
  message?: MessageItemToMessageResolver<TParent>;
}

export interface MessageItemToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MessageItemToTitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MessageItemToMessageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
